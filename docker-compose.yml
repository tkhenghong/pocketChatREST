# Using Docker Compose as part of the Proof Concept to make sure everything is ready for deployment in 1
# single command.

# General problems:
# Binding port is already allocated:
# https://stackoverflow.com/questions/56285989/docker-compose-bind-failed-port-is-already-allocated

# Connect to MongoDB Docker from Spring Boot Docker:
# https://stackoverflow.com/questions/59330607/connect-to-docker-compose-mongodb-via-spring-boot-application

# MongoDB related guides & problems:

# How To Deploy And Manage MongoDB With Docker:
# https://phoenixnap.com/kb/docker-mongodb

# Spring Boot Docker:
# https://spring.io/guides/topicals/spring-boot-docker/

# Spring Boot + Mongodb + Docker Compose:
# https://nirajsonawane.github.io/2019/12/16/Spring-Boot-Mongodb-Docker-Compose/

# How to run Spring Boot and MongoDB in Docker using Docker Compose:
# https://dev-pages.info/how-to-run-spring-boot-and-mongodb-in-docker-using-docker-compose/

# https://stackoverflow.com/questions/47901561/how-to-run-mongodb-and-mongo-express-with-docker-compose
# https://kb.sloppy.io/en/articles/1313693-setting-up-mongodb-and-mongo-express-on-sloppy-io

# No more smallfiles option in latest mongo container.
# https://github.com/jsbroks/coco-annotator/issues/244

# Mount MongoDB data Volume:
# https://stackoverflow.com/questions/35400740/how-to-set-docker-mongo-data-volume

# RabbitMQ related guide & issues:

#  Get Started with RabbitMQ on Docker
# https://codeburst.io/get-started-with-rabbitmq-on-docker-4428d7f6e46b

# https://zgadzaj.com/development/docker/docker-compose/containers/rabbitmq
# https://github.com/laradock/laradock/issues/2048

# Interesting articles related to Docker:

# Dockerize your Java Application:
# https://runnable.com/docker/java/dockerize-your-java-application

# NOTE: You must go through:
# https://hub.docker.com/r/bitnami/kafka/
# to install new certificates for the server for secure Kafka authentication (SASL).

# Spring Boot in Docker:
# Externalising Spring Boot properties when deploying to Docker:
# https://stackoverflow.com/questions/46057625/externalising-spring-boot-properties-when-deploying-to-docker

version: "3"

services:
  pocketChat:
    image: tkhenghong/pocketchat:latest
    container_name: pocketChat
#    restart: always
    ports:
      - 8888:8888
    volumes:
    - ~/pocketChat/logs:/logs
    environment:
      - server.startup.send.email.enabled=true
      # SMS Configurations for Twilio
      - server.sms.twilio.account.sid=*Your Twilio Account SID*
      - server.sms.twilio.auth.token=*Your Twilio Account Auth token*
      - server.sms.twilio.phone.number=*Your Twilio Phone Number*
      - server.sms.twilio.verified.phone.number=*Verified Phone Number in Twilio*

      # Email Configurations for Gmail
      - email.sender.host=smtp.gmail.com
      - email.host.port=587
      - email.username=*Your Gmail Email Address*
      - email.password=*You Gmail app specific password*
      - email.transport.protocol=smtp
      - email.smtp.auth=true
      - email.smtp.starttls.enable=true
      - email.debug=true

      # Send SMS content to email for easier debug.
      - email.send.sms.to.email=false
      - email.send.sms.to.email.address=*Your email*
    depends_on:
      - mongodb
      - rabbitmq
      - zookeeper
    links:
      - rabbitmq
  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - 27017:27017
#    restart: always
    # command: --smallfiles
    volumes:
      # - ./data/db:/data/db
      - /tmp/pocketChatMongoData:/data/db
#    environment:
      # MONGODB_URI: mongodb://mongodb
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: password
  mongo-express:
      image: mongo-express
#      restart: always
      ports:
        - 8081:8081
#      environment:
#        ME_CONFIG_MONGODB_SERVER: mongo
#        ME_CONFIG_MONGODB_PORT: 27017
#        ME_CONFIG_MONGODB_AUTH_DATABASE: admin
#        ME_CONFIG_MONGODB_AUTH_USERNAME: root
#        ME_CONFIG_MONGODB_AUTH_PASSWORD: password
      depends_on:
        - mongodb
  rabbitmq:
    image: rabbitmq:3-management
    hostname: my-rabbit
    volumes:
      - ~/rabbitmq/etc/definitions.json:/etc/rabbitmq/definitions.json
      - ~/rabbitmq/etc/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ~/rabbitmq/data:/var/lib/rabbitmq/mnesia/rabbit@my-rabbit
      - ~/rabbitmq/logs:/var/log/rabbitmq/log
#    environment:
#      RABBITMQ_DEFAULT_USER: guest
#      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - 5672:5672
      - 15672:15672
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - 2181:2181
    # DEVELOPMENT
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    # PRODUCTION
#    environment:
#      - ZOO_ENABLE_AUTH=yes
#      - ZOO_SERVER_USERS=kafka
#      - ZOO_SERVER_PASSWORDS=kafka_password
#      - ALLOW_ANONYMOUS_LOGIN=no
    volumes:
      - ~/zookeeper/data:/bitnami/zookeeper
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - 9092
    # DEVELOPMENT
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
#    # PRODUCTION
#    hostname: tkhenghong.com
#    environment:
#      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
#      - KAFKA_CFG_LISTENERS=SASL_SSL://:9092
#      - KAFKA_CFG_ADVERTISED_LISTENERS=SASL_SSL://:9092
#      - KAFKA_ZOOKEEPER_USER=kafka
#      - KAFKA_ZOOKEEPER_PASSWORD=kafka_password
#      - KAFKA_CLIENT_USER=user
#      - KAFKA_CLIENT_PASSWORD=password
#      - KAFKA_CERTIFICATE_PASSWORD=certificatePassword123
    volumes:
      - ~/kafka/data:/bitnami/kafka
      - './kafka.keystore.jks:/opt/bitnami/kafka/conf/certs/kafka.keystore.jks:ro'
      - './kafka.truststore.jks:/opt/bitnami/kafka/conf/certs/kafka.truststore.jks:ro'
    links:
      - zookeeper
    depends_on:
      - zookeeper

# For Zookeeper and Kafka in Docker, we are using bitnami/zookeeper and bitnami/kafka, both have 50M downloads
