spring.application.name=pocketChatREST

server.port=8888

# MongoDB Configurations
#spring.data.mongodb.uri=mongodb://localhost
spring.data.mongodb.host=mongodb
#spring.data.mongodb.port=27017
#spring.data.mongodb.authentication-database=admin
#spring.data.mongodb.username=root
#spring.data.mongodb.password=password
spring.data.mongodb.database=pocketChatDB

# Server Startup Configuration
server.startup.send.email.enabled=false
server.startup.send.sms.enabled=false

#eureka.client.service-url.default-zone=http://localhost:8761/eureka

# Server File Configurations
server.file.base.directory=/Users/tkhenghong/data

# JWT Configurations
jwt.secret.key=pocketChat
# Set JWT Token alive for 10 Hours
jwt.alive.seconds=36000000

# HTTP SSL Configurations
server.ssl.key-store-type=PKCS12
server.ssl.key-store=classpath:https/keystore/keystore.p12
server.ssl.key-store-password=password
server.ssl.key-alias=tomcat

#security.require-ssl=true #Deprecated

# SMS Configurations
server.sms.allow.send.sms=false

# SMS Configurations for Twilio
server.sms.twilio.account.sid=*Your Twilio Account SID*
server.sms.twilio.auth.token=*Your Twilio Account Auth token*
server.sms.twilio.phone.number=*Your Twilio Phone Number*
server.sms.twilio.verified.phone.number=*Verified Phone Number in Twilio*

# Email Configurations for Gmail
email.sender.host=smtp.gmail.com
email.host.port=587
email.username=*Your Gmail Email Address*
email.password=*You Gmail app specific password*
email.transport.protocol=smtp
email.smtp.auth=true
email.smtp.starttls.enable=true
email.debug=true

# Send SMS content to email for easier debug.
email.send.sms.to.email=false
email.send.sms.to.email.address=*Your email*

# OTP Configurations
server.otp.length=6
server.otp.maximumAliveMinutes=5
server.otp.maximumRetryAttempt=3

# Password Policy Configurations
password.lower.case.character.length=1
password.upper.case.character.length=1
password.digit.number.character.length=1
password.special.character.list=!@#$%^&*()_+
password.special.character.length=1
password.minimum.length=8
password.maximum.length=32

# Encryption Configurations
#encryption.rsa.public.key.directory=encryption/rsa/public_key_rsa_4096_pkcs8-exported.pem
encryption.rsa.public.key.directory=encryption/rsa/public_key.der
#encryption.rsa.private.key.directory=encryption/rsa/private_key_rsa_4096_pkcs8-generated.pem
encryption.rsa.private.key.directory=encryption/rsa/private_key.der
encryption.rsa.key.factory.algorithm=RSA
encryption.rsa.cipher.algorithm.with.padding=RSA/None/OAEPWITHSHA-256ANDMGF1PADDING
encryption.rsa.cipher.algorithm.with.padding2.for.encryption=RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING
encryption.rsa.cipher.algorithm.with.padding2.for.decryption=RSA/ECB/OAEPPadding
encryption.rsa.cipher.key.size=4096
encryption.rsa.cipher.algorithm.provider=BC

encryption.aes.private.key.directory=
encryption.aes.default.secret=PocketChatAESTest
encryption.aes.default.secret.key.spec.algorithm=AES
encryption.aes.cipher.algorithm.with.padding=AES/GCM/NoPadding
encryption.aes.cipher.algorithm.with.padding2=AES/ECB/PKCS5Padding
encryption.aes.message.digest.algorithm=SHA-1

# RabbitMQ Configurations
rabbitmq.connection.factory.username=guest
rabbitmq.connection.factory.password=guest

# Kafka Configurations. https://dzone.com/articles/magic-of-kafka-with-spring-boot
#spring.kafka.consumer.bootstrap-servers=localhost:9092
#spring.kafka.consumer.group-id=group-id
#spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.properties.security.protocol=SASL_SSL
#spring.kafka.properties.sasl.mechanism=PLAIN
#spring.kafka.ssl.protocol=TLSv1.2
#spring.kafka.producer.bootstrap-servers=localhost:9092
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# If you didn't created the defined topic but you have told Spring Boot to listen to that topic,
# By default Spring Boot will give you an fatal error,
# but write spring.kafka.listener.missing-topics-fatal=false will prevent it from happening.
#spring.kafka.listener.missing-topics-fatal=false
