package com.pocketchat.utils.encryption;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayNameGeneration;
import org.junit.jupiter.api.DisplayNameGenerator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;

import java.security.KeyPair;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;

@ExtendWith(MockitoExtension.class)
@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class)
public class EncryptionUtilTest {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Value("${encryption.rsa.public.key.directory}")
    String rsaPublicKeyDirectory = "encryption/rsa/public_key.der";

    @Value("${encryption.rsa.private.key.directory}")
    String rsaPrivateKeyDirectory = "encryption/rsa/private_key.der";

    @Value("${encryption.aes.private.key.directory}")
    String aesPrivateKeyDirectory = "";

    @Value("${encryption.rsa.cipher.algorithm.with.padding}")
    String rsaCipherAlgorithmWithPadding = "RSA/None/OAEPWITHSHA-256ANDMGF1PADDING";

    @Value("${encryption.rsa.cipher.algorithm.provider}")
    String rsaCipherAlgorithmProvider = "BC";

    @Value("${encryption.aes.cipher.algorithm.with.padding}")
    String aesCipherAlgorithmWithPadding = "AES/GCM/NoPadding";

    @Value("${encryption.rsa.cipher.key.size}")
    int rsaCipherKeySize = 4096;

    private EncryptionUtil encryptionUtil;

    @BeforeEach
    public void setup() {
        //if we don't call below, we will get NullPointerException
        MockitoAnnotations.initMocks(this);
        encryptionUtil = new EncryptionUtil(
                rsaPublicKeyDirectory,
                rsaPrivateKeyDirectory,
                aesPrivateKeyDirectory,
                rsaCipherAlgorithmWithPadding,
                rsaCipherAlgorithmProvider,
                aesCipherAlgorithmWithPadding,
                rsaCipherKeySize
        );
    }

    @Test
    public void testEncryption() {
        String testString = UUID.randomUUID().toString();

        String rsaEncryptedEncodedString = encryptionUtil.encryptStringWithSpecialRSABase64Encoded(testString);

        logger.info("rsaEncryptedEncodedString: {}", rsaEncryptedEncodedString);

        String restoredText = encryptionUtil.decryptWithSpecialRSABase64Encoded(rsaEncryptedEncodedString);

        logger.info("restoredText: {}", restoredText);

        assertEquals(restoredText, testString);
    }

    /**
     * To test the RSA keys generated by the Java application can encrypt & decrypt the plain text successfully or not.
     * */
    @Test
    public void testRandomRSAKeysEncryption() {
        KeyPair keyPair = encryptionUtil.generateNewRSAKeyPair();

        String testString = UUID.randomUUID().toString();

        String rsaEncryptedEncodedString = encryptionUtil.encryptStringWithRSABase64Encoded(testString, keyPair.getPublic());

        String restoredText = encryptionUtil.decryptWithRSABase64Encoded(rsaEncryptedEncodedString, keyPair.getPrivate());

        assertEquals(restoredText, testString);
    }
}
